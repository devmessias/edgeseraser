from ._index import IndexMixin as IndexMixin
from ._sparsetools import csr_column_index1 as csr_column_index1, csr_column_index2 as csr_column_index2, csr_row_index as csr_row_index, csr_row_slice as csr_row_slice, csr_sample_offsets as csr_sample_offsets, csr_sample_values as csr_sample_values, csr_todense as csr_todense, get_csr_submatrix as get_csr_submatrix
from .base import SparseEfficiencyWarning as SparseEfficiencyWarning, isspmatrix as isspmatrix, spmatrix as spmatrix
from .data import _data_matrix, _minmax_mixin
from .dia import dia_matrix as dia_matrix
from .sputils import asmatrix as asmatrix, check_shape as check_shape, downcast_intp_index as downcast_intp_index, get_index_dtype as get_index_dtype, get_sum_dtype as get_sum_dtype, getdtype as getdtype, is_pydata_spmatrix as is_pydata_spmatrix, isdense as isdense, isintlike as isintlike, isscalarlike as isscalarlike, isshape as isshape, matrix as matrix, to_native as to_native, upcast as upcast, upcast_char as upcast_char
from typing import Any

class _cs_matrix(_data_matrix, _minmax_mixin, IndexMixin):
    data: Any
    indices: Any
    indptr: Any
    def __init__(self, arg1, shape: Any | None = ..., dtype: Any | None = ..., copy: bool = ...) -> None: ...
    def getnnz(self, axis: Any | None = ...): ...
    def check_format(self, full_check: bool = ...) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __lt__(self, other): ...
    def __gt__(self, other): ...
    def __le__(self, other): ...
    def __ge__(self, other): ...
    def multiply(self, other): ...
    def diagonal(self, k: int = ...): ...
    def maximum(self, other): ...
    def minimum(self, other): ...
    def sum(self, axis: Any | None = ..., dtype: Any | None = ..., out: Any | None = ...): ...
    def tocoo(self, copy: bool = ...): ...
    def toarray(self, order: Any | None = ..., out: Any | None = ...): ...
    def eliminate_zeros(self) -> None: ...
    has_canonical_format: Any
    def sum_duplicates(self) -> None: ...
    has_sorted_indices: Any
    def sorted_indices(self): ...
    def sort_indices(self) -> None: ...
    def prune(self) -> None: ...
    def resize(self, *shape) -> None: ...
