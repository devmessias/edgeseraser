from .compressed import _cs_matrix
from .data import _minmax_mixin
from typing import Any

class bsr_matrix(_cs_matrix, _minmax_mixin):
    format: str
    data: Any
    indices: Any
    indptr: Any
    def __init__(self, arg1, shape: Any | None = ..., dtype: Any | None = ..., copy: bool = ..., blocksize: Any | None = ...) -> None: ...
    def check_format(self, full_check: bool = ...) -> None: ...
    blocksize: Any
    def getnnz(self, axis: Any | None = ...): ...
    def diagonal(self, k: int = ...): ...
    def __getitem__(self, key) -> None: ...
    def __setitem__(self, key, val) -> None: ...
    def matvec(self, other): ...
    def matmat(self, other): ...
    def tobsr(self, blocksize: Any | None = ..., copy: bool = ...): ...
    def tocsr(self, copy: bool = ...): ...
    def tocsc(self, copy: bool = ...): ...
    def tocoo(self, copy: bool = ...): ...
    def toarray(self, order: Any | None = ..., out: Any | None = ...): ...
    def transpose(self, axes: Any | None = ..., copy: bool = ...): ...
    def eliminate_zeros(self) -> None: ...
    has_canonical_format: bool
    def sum_duplicates(self) -> None: ...
    has_sorted_indices: bool
    def sort_indices(self) -> None: ...
    def prune(self) -> None: ...

def isspmatrix_bsr(x): ...
