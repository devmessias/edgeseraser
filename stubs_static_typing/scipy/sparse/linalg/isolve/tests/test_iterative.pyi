from scipy.linalg import norm as norm
from scipy.sparse import SparseEfficiencyWarning as SparseEfficiencyWarning, csr_matrix as csr_matrix, spdiags as spdiags
from scipy.sparse.linalg import LinearOperator as LinearOperator, aslinearoperator as aslinearoperator
from scipy.sparse.linalg.isolve import bicg as bicg, bicgstab as bicgstab, cg as cg, cgs as cgs, gcrotmk as gcrotmk, gmres as gmres, lgmres as lgmres, minres as minres, qmr as qmr
from typing import Any

class Case:
    name: Any
    A: Any
    b: Any
    skip: Any
    nonconvergence: Any
    def __init__(self, name, A, b: Any | None = ..., skip: Any | None = ..., nonconvergence: Any | None = ...) -> None: ...

class IterativeParams:
    solvers: Any
    cases: Any
    Poisson1D: Any
    def __init__(self) -> None: ...

params: Any

def check_maxiter(solver, case) -> None: ...
def test_maxiter() -> None: ...
def assert_normclose(a, b, tol: float = ...) -> None: ...
def check_convergence(solver, case) -> None: ...
def test_convergence() -> None: ...
def check_precond_dummy(solver, case): ...
def test_precond_dummy() -> None: ...
def check_precond_inverse(solver, case): ...
def test_precond_inverse() -> None: ...
def test_gmres_basic() -> None: ...
def test_reentrancy() -> None: ...
def test_atol(solver) -> None: ...
def test_zero_rhs(solver) -> None: ...
def test_maxiter_worsening(solver) -> None: ...
def test_x0_working(solver) -> None: ...

class TestQMR:
    def test_leftright_precond(self): ...

class TestGMRES:
    def test_callback(self): ...
    def test_abi(self) -> None: ...
    def test_atol_legacy(self) -> None: ...
    def test_defective_precond_breakdown(self) -> None: ...
    def test_defective_matrix_breakdown(self) -> None: ...
    def test_callback_type(self) -> None: ...
    def test_callback_x_monotonic(self) -> None: ...
