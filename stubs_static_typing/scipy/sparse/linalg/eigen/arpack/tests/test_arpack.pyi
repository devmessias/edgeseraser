from scipy._lib._gcutils import IS_PYPY as IS_PYPY, assert_deallocated as assert_deallocated
from scipy.linalg import eig as eig, eigh as eigh, hilbert as hilbert, svd as svd
from scipy.sparse import csc_matrix as csc_matrix, csr_matrix as csr_matrix, diags as diags, isspmatrix as isspmatrix, rand as rand
from scipy.sparse.linalg import LinearOperator as LinearOperator, aslinearoperator as aslinearoperator
from scipy.sparse.linalg.eigen.arpack import ArpackNoConvergence as ArpackNoConvergence, arpack as arpack, eigs as eigs, eigsh as eigsh, svds as svds
from typing import Any

__usage__: str

def generate_matrix(N, complex_: bool = ..., hermitian: bool = ..., pos_definite: bool = ..., sparse: bool = ...): ...
def generate_matrix_symmetric(N, pos_definite: bool = ..., sparse: bool = ...): ...
def assert_allclose_cc(actual, desired, **kw) -> None: ...
def argsort_which(eigenvalues, typ, k, which, sigma: Any | None = ..., OPpart: Any | None = ..., mode: Any | None = ...): ...
def eval_evec(symmetric, d, typ, k, which, v0: Any | None = ..., sigma: Any | None = ..., mattype=..., OPpart: Any | None = ..., mode: str = ...) -> None: ...

class DictWithRepr(dict):
    name: Any
    def __init__(self, name) -> None: ...

class SymmetricParams:
    eigs: Any
    which: Any
    mattypes: Any
    sigmas_modes: Any
    real_test_cases: Any
    complex_test_cases: Any
    def __init__(self) -> None: ...

class NonSymmetricParams:
    eigs: Any
    which: Any
    mattypes: Any
    sigmas_OPparts: Any
    real_test_cases: Any
    complex_test_cases: Any
    def __init__(self) -> None: ...

def test_symmetric_modes() -> None: ...
def test_hermitian_modes() -> None: ...
def test_symmetric_starting_vector() -> None: ...
def test_symmetric_no_convergence() -> None: ...
def test_real_nonsymmetric_modes() -> None: ...
def test_complex_nonsymmetric_modes() -> None: ...
def test_standard_nonsymmetric_starting_vector() -> None: ...
def test_general_nonsymmetric_starting_vector() -> None: ...
def test_standard_nonsymmetric_no_convergence() -> None: ...
def test_eigen_bad_shapes() -> None: ...
def test_eigen_bad_kwargs() -> None: ...
def test_ticket_1459_arpack_crash() -> None: ...
def sorted_svd(m, k, which: str = ...): ...
def svd_estimate(u, s, vh): ...
def svd_test_input_check() -> None: ...
def test_svd_simple_real() -> None: ...
def test_svd_simple_complex() -> None: ...
def test_svd_maxiter() -> None: ...
def test_svd_return() -> None: ...
def test_svd_which() -> None: ...
def test_svd_v0() -> None: ...
def test_svd_LM_ones_matrix() -> None: ...
def test_svd_LM_zeros_matrix() -> None: ...
def test_svd_LM_zeros_matrix_gh_3452() -> None: ...

class CheckingLinearOperator(LinearOperator):
    A: Any
    dtype: Any
    shape: Any
    def __init__(self, A) -> None: ...

def test_svd_linop(): ...
def test_linearoperator_deallocation(): ...
def test_svds_partial_return() -> None: ...
def test_svds_wrong_eigen_type() -> None: ...
def test_parallel_threads() -> None: ...
def test_reentering(): ...
def test_regression_arpackng_1315() -> None: ...
def test_eigs_for_k_greater() -> None: ...
def test_eigsh_for_k_greater() -> None: ...
def test_real_eigs_real_k_subset() -> None: ...
