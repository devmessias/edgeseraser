from collections.abc import Generator
from typing import Any, Tuple, Union
from networkx.classes import Graph, DiGraph

GraphOrDiGraph = Union[Graph, DiGraph]


def set_node_attributes(G, values, name: str | None = ...) -> None: ...
def get_node_attributes(G: GraphOrDiGraph, name: str): ...
def set_edge_attributes(G: GraphOrDiGraph, values: dict, name: str | None = ...) -> None: ...
def get_edge_attributes(G: GraphOrDiGraph, name): ...
def is_weighted(G, edge: Any | None = ..., weight: str = ...): ...
def is_negatively_weighted(G, edge: Any | None = ..., weight: str = ...): ...
def is_empty(G): ...
